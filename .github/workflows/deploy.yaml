name: Build Docker Image

on:
  push:
    tags:
      - 'v*'

permissions: write-all

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  trivy-scanning:
    name: 🔍 Trivy Scan
    runs-on: ubuntu-latest
    # permissions:
    #   security-events: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
    
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
  
  trivy-scanning-configs:
    name: 🔍 Trivy Scanner Configs
    needs: [trivy-scanning]
    runs-on: ubuntu-latest
    # permissions:
    #   security-events: write

    steps:
      - name: 🚪 Checkout
        uses: actions/checkout@v4

      - name: 👤 Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GIT_PAT }}

      - name: 🔍 Run Trivy vulnerability scanner in IaC mode - Application
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './Application'
          hide-progress: false
          format: 'sarif'
          output: 'trivy-results-application.sarif'
          exit-code: '0' 
          ignore-unfixed: true          
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: 📤 Upload Trivy scan results to GitHub Security tab - Application
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-application.sarif'
          category: 'TrivyScanResultsApplication'

      - name: 🔍 Run Trivy vulnerability scanner in IaC mode - Configs
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './Configs'
          hide-progress: false
          format: 'sarif'
          output: 'trivy-results-configs.sarif'
          exit-code: '0' 
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: 📤 Upload Trivy scan results to GitHub Security tab - Configs
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-configs.sarif'
          category: 'TrivyScanResultsConfigs'

  build-and-push-image:
    name: 🛠️ Build and ⬆️ Push Docker Image to Github Container Registry
    needs: [trivy-scanning-configs]
    runs-on: ubuntu-latest
    # permissions:
    #   contents: read
    #   packages: write

    outputs:
      docker_version: ${{ steps.meta.outputs.version }}

    steps:
      - name: 🚪 Checkout Repository
        uses: actions/checkout@v4

      - name: 👤 Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GIT_PAT }}

      - name: ⛏️ Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}

      - name: 👁️ Display Docker Metadata Output Version
        run: echo "VERSION=${{ steps.meta.outputs.version }}"

      - name: 🛠️ Build and ⬆️ Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./Application
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline
      
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'                     # Docker image reference
          format: 'sarif'                                                                   # output format of scan results (table, json, sarif)
          output: 'trivy-results-ghcr.sarif'                                                # location where vulnerability scan results will be recorded
          exit-code: '0'                                                                    # if 'exit-code: 1' your pipeline will be interrupted
          ignore-unfixed: true                                                              # ignore unfixed vulnerabilities
          vuln-type: 'os,library'                                                           # type of vulnerabilities to be displayed
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: 📤 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-ghcr.sarif'

  modifygit:
    name: ☸️ Deploy Application in ArgoCD
    needs: [build-and-push-image]
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔄 Checkout do repositório App-Manifest
        uses: actions/checkout@v4        
        with:
          ref: 'main'
          repository: 'emanuelfds/App-Manifest'
          token: ${{ secrets.GIT_PAT }}
          persist-credentials: true

      - name: 🔁 Checkout deste repositório (com a action local)
        uses: actions/checkout@v4
        with:
          path: 'app'  # evita sobrescrever o App-Manifest

      - name: 👁️ Display Docker Metadata Output Version from build-and-push-image
        run: echo "VERSION=${{ needs.build-and-push-image.outputs.docker_version }}"

      - name: 🏷️ Atualizar tag da imagem no deployment
        run: |
          set -e

          echo "🔧 Configurando Git"
          git config user.email "${{ secrets.GIT_EMAIL }}"
          git config user.name "${{ vars.GIT_USERNAME }}"

          DEPLOYMENT_FILE="${{ vars.K8S_PATH }}/06-app-deployment.yaml"
          VERSION="${{ needs.build-and-push-image.outputs.docker_version }}"
          REGISTRY="${{ env.REGISTRY }}"
          IMAGE_NAME="${{ env.IMAGE_NAME }}"

          if [[ -z "$DEPLOYMENT_FILE" || -z "$VERSION" || -z "$REGISTRY" || -z "$IMAGE_NAME" ]]; then
            echo "❌ Erro: Variável obrigatória não definida."
            echo "🔎 DEPLOYMENT_FILE: $DEPLOYMENT_FILE"
            echo "🔎 VERSION: $VERSION"
            echo "🔎 REGISTRY: $REGISTRY"
            echo "🔎 IMAGE_NAME: $IMAGE_NAME"
            exit 1
          fi

          echo "📂 Diretório atual:"
          pwd

          echo "📄 Conteúdo do arquivo de deployment (antes da alteração):"
          cat "$DEPLOYMENT_FILE"

          echo "🛠️ Atualizando tag da imagem..."
          sed -i "s+${REGISTRY}/${IMAGE_NAME}.*+${REGISTRY}/${IMAGE_NAME}:${VERSION}+g" "$DEPLOYMENT_FILE"

          echo "🔄 Atualizando campo 'version'..."
          sed -i "s/\(version: \"\)[^\"]*\(\".*\)/\1${VERSION}\2/" "$DEPLOYMENT_FILE"

          echo "✅ Arquivo atualizado:"
          cat "$DEPLOYMENT_FILE"

          if git diff --quiet; then
          echo "🆗 Nenhuma alteração detectada, pulando commit."
          else
            git add .
            git commit -m "🔖 Nova versão da Aplicação: ${VERSION}"
            git push origin main
          fi

      - name: 📢 Notificar Slack com deploy
        uses: ./app/.github/actions/notificar-slack
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          version: ${{ needs.build-and-push-image.outputs.docker_version }}
          image: ${{ env.IMAGE_NAME }}
          repo: ${{ github.repository }}
          sha: ${{ github.sha }}
          ref: ${{ github.ref_name }}
          actor: ${{ github.actor }}
          