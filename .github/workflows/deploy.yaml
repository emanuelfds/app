name: Build Docker Image

on:
  push:
    tags:
      - 'v*'

permissions: write-all

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  trivy-scanning:
    name: üîç Trivy Scan
    runs-on: ubuntu-latest
    # permissions:
    #   security-events: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
    
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
  
  trivy-scanning-configs:
    name: üîç Trivy Scanner Configs
    needs: [trivy-scanning]
    runs-on: ubuntu-latest
    # permissions:
    #   security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GIT_PAT }}

      - name: Run Trivy vulnerability scanner in IaC mode - Application
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './Application'
          hide-progress: false
          format: 'sarif'
          output: 'trivy-results-application.sarif'
          exit-code: '0' 
          ignore-unfixed: true          
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: üì§ Upload Trivy scan results to GitHub Security tab - Application
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-application.sarif'
          category: 'TrivyScanResultsApplication'

      - name: üîç Run Trivy vulnerability scanner in IaC mode - Configs
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './Configs'
          hide-progress: false
          format: 'sarif'
          output: 'trivy-results-configs.sarif'
          exit-code: '0' 
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: üì§ Upload Trivy scan results to GitHub Security tab - Configs
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-configs.sarif'
          category: 'TrivyScanResultsConfigs'

  build-and-push-image:
    name: üõ†Ô∏è Build and ‚¨ÜÔ∏è Push Docker Image to Github Container Registry
    needs: [trivy-scanning-configs]
    runs-on: ubuntu-latest
    # permissions:
    #   contents: read
    #   packages: write

    outputs:
      docker_version: ${{ steps.meta.outputs.version }}

    steps:
      - name: üö™ Checkout Repository
        uses: actions/checkout@v4

      - name: üë§ Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GIT_PAT }}

      - name: ‚õèÔ∏è Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}

      - name: üëÄ Display Docker Metadata Output Version
        run: echo "VERSION=${{ steps.meta.outputs.version }}"

      - name: üõ†Ô∏è Build and ‚¨ÜÔ∏è Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./Application
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline
      
      - name: üîç Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'                     # Docker image reference
          format: 'sarif'                                                                   # output format of scan results (table, json, sarif)
          output: 'trivy-results-ghcr.sarif'                                                # location where vulnerability scan results will be recorded
          exit-code: '0'                                                                    # if 'exit-code: 1' your pipeline will be interrupted
          ignore-unfixed: true                                                              # ignore unfixed vulnerabilities
          vuln-type: 'os,library'                                                           # type of vulnerabilities to be displayed
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: üì§ Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-ghcr.sarif'

  modifygit:
    name: ‚ò∏Ô∏è Deploy Application in ArgoCD
    needs: [build-and-push-image]
    runs-on: ubuntu-latest
    
    steps:
      - name: üîÑ Changing the deployment of git repo
        uses: actions/checkout@v4        
        with:
          ref: 'main'
          repository: 'emanuelfds/App-Manifest'
          token: ${{ secrets.GIT_PAT }}
          persist-credentials: true

      - name: Display Docker Metadata Output Version from build-and-push-image
        run: echo "VERSION=${{ needs.build-and-push-image.outputs.docker_version }}"

      - name: üè∑Ô∏è Modifying Tag Image in Deployment
        run: |
          git config user.email ${{ secrets.GIT_EMAIL }}
          git config user.name "${{ vars.GIT_USERNAME }}"
          pwd
          cat ${{ vars.K8S_PATH }}/04-deployment.yaml
          pwd
          sed -i "s+${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}.*+${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push-image.outputs.docker_version }}+g" ${{ vars.K8S_PATH }}/04-deployment.yaml
          sed -i 's/\(version: "\)[^"]*\(".*\)/\1${{ needs.build-and-push-image.outputs.docker_version }}\2/' ${{ vars.K8S_PATH }}/04-deployment.yaml
          cat ${{ vars.K8S_PATH }}/04-deployment.yaml
          git add .
          git commit -m 'Nova vers√£o da Aplica√ß√£o: ${{ needs.build-and-push-image.outputs.docker_version }}'
          git push origin main